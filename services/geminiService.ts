
import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { INITIAL_GAME_PROMPT, CONTINUE_GAME_PROMPT_TEMPLATE } from '../constants';
import { GeminiStoryResponse } from '../types';

const API_KEY = process.env.API_KEY;
let ai: GoogleGenAI | null = null;

if (API_KEY) {
  ai = new GoogleGenAI({ apiKey: API_KEY });
} else {
  console.warn("API_KEY environment variable is not set. The application will not function correctly.");
}

const GEMINI_MODEL = 'gemini-2.5-flash-preview-04-17';
const IMAGEN_MODEL = 'imagen-3.0-generate-002';

function parseJsonFromGeminiResponse(responseText: string): GeminiStoryResponse | null {
  let jsonStr = responseText.trim();
  // Strip markdown fences if present
  const fenceRegex = /^```(?:json)?\s*\n?(.*?)\n?\s*```$/s;
  const match = jsonStr.match(fenceRegex);
  if (match && match[2]) {
    jsonStr = match[2].trim();
  }
  
  try {
    const parsed = JSON.parse(jsonStr);
    // Basic validation of the expected structure
    if (parsed && typeof parsed.new_story_segment === 'string' && Array.isArray(parsed.choices) && parsed.choices.every((c: any) => typeof c === 'string') && typeof parsed.image_prompt === 'string') {
      return parsed as GeminiStoryResponse;
    }
    console.error("Parsed JSON does not match expected structure:", parsed);
    return null;
  } catch (e) {
    console.error("Failed to parse JSON response:", e, "Raw text:", responseText);
    return null;
  }
}

export async function fetchGameUpdate(
  currentStory: string | null,
  playerChoice: string | null
): Promise<GeminiStoryResponse> {
  if (!ai) {
    throw new Error("Gemini AI client is not initialized. Please ensure API_KEY is set.");
  }

  const prompt = currentStory && playerChoice
    ? CONTINUE_GAME_PROMPT_TEMPLATE(currentStory, playerChoice)
    : INITIAL_GAME_PROMPT;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL,
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        temperature: 0.75, // A bit of creativity
        topP: 0.95,
      },
    });

    const parsedData = parseJsonFromGeminiResponse(response.text);
    if (!parsedData) {
      throw new Error("Failed to parse story data from Gemini response or response structure is invalid. Raw response: " + response.text);
    }
    return parsedData;

  } catch (error) {
    console.error("Error fetching game update from Gemini:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    if (errorMessage.includes("API key not valid")) {
        throw new Error("Invalid API Key. Please check your API_KEY environment variable.");
    }
    throw new Error(`Failed to get game update: ${errorMessage}`);
  }
}

export async function generateAdventureImage(prompt: string): Promise<string> {
  if (!ai) {
    throw new Error("Gemini AI client is not initialized. Please ensure API_KEY is set.");
  }

  try {
    const enhancedPrompt = `Epic fantasy art, detailed, atmospheric, high quality, ${prompt}`;
    const response = await ai.models.generateImages({
      model: IMAGEN_MODEL,
      prompt: enhancedPrompt,
      config: { numberOfImages: 1, outputMimeType: 'image/jpeg' }, // jpeg is often smaller
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image?.imageBytes) {
      return response.generatedImages[0].image.imageBytes;
    }
    throw new Error("No image generated by Imagen, or image data is missing.");

  } catch (error) {
    console.error("Error generating image with Imagen:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
     if (errorMessage.includes("API key not valid")) {
        throw new Error("Invalid API Key for Imagen. Please check your API_KEY environment variable.");
    }
    throw new Error(`Failed to generate image: ${errorMessage}`);
  }
}
    